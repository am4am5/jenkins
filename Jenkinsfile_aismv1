pipeline {
    agent any

    stages {
        stage('Git') {
            echo "1.Get source code"
            checkout([$class: 'GitSCM', branches: [[name: '*/dev']], userRemoteConfigs: [[credentialsId: 'malexandrov', url: 'https://gitoais.nces.by/govby/aismv.git']]])
            }
        }
        stage('Compile jar') {
            echo "2.Compile jar"
            sh "cd ./DynamicFormatSystem"
            sh "mvn clean package"
            sh "cp -f ./application/target/DynamicFormatSystem-0.0.1-SNAPSHOT.jar ./dfs.jar"
        }
        stage('Build Docker') {
            echo "3.Build Docker image"
            sh "docker build -t 172.16.9.49:30020/aismv/back/aismv-back-dfs:$BUILD_NUMBER -f Dockerfile_aismv ."
            }
        stage('Push to Docker Registry') {
            echo "4.Push to Docker registry and remove local"
            sh "docker push 172.16.9.49:30020/aismv/back/aismv-back-dfs:$BUILD_NUMBER"
            sh "docker rmi 172.16.9.49:30020/aismv/back/aismv-back-dfs:$BUILD_NUMBER"
            }
        stage('Deploy to Kubernetes') {
            echo "5. Deploy to Kubernetes"
            sh "kubectl set image deployment/aismv-back-dfs aismv-back-dfs=registry.nces.by/aismv/back/aismv-back-dfs:$BUILD_NUMBER -n aismv --kubeconfig /opt/tomcat/.jenkins/nces.kube"
        }
        stage('Archive artifact') {
            echo "6. Archive artifact"
            archiveArtifacts artifacts: 'DynamicFormatSystem/application/target/DynamicFormatSystem-0.0.1-SNAPSHOT.jar'
        }
    post {
        always {
            script {
                if (currentBuild.currentResult == 'FAILURE') {
                        echo "7. Email notification"
                        emailext attachLog: true, body: '$DEFAULT_CONTENT', compressLog: true, replyTo: '$DEFAULT_REPLYTO', subject: '$DEFAULT_SUBJECT', to: 'MAlexandrov@iba.by'
                }
            }
        }
    }
}
